#!/usr/bin/env bash

# Death and the comp(iler )pass
# This is basically a glorified Makefile

usage() {
cat <<EOF
Usage: compass [OPTION] FILE
Compile or interpret Lonnrot Scheme code.
FILE must be present in the current directory
Example: compass -c fib.rot

Possible options are:
    -c  Produce an ELF executable for x86 machines
    -i  Interpret a Lonnrot Scheme file
    -v  Produce an object file for tlvm, the Lonnrot Scheme VM
EOF
}

# TODO: write an install script to avoid hardcoding this
srcPath=".."
filename=${2%%\.*}

compile() {
    echo "Compiling file $1 into x86..."

    # Huge hack: copy the std library to my current dir
    # There should be a dedicated import/require in the language that
    # pulls from a certain path
    cp ${srcPath}/std.lonn .

    # Run the compiler
    racket -t ${srcPath}/compile-file.rkt -m $1 > ${filename}.s &&

    # Produce the nasm object
    nasm -f elf64 -o ${filename}.o ${filename}.s &&

    # Produce the runtime objects
    gcc -c ${srcPath}/main.c -o main.o -fPIC &&
    gcc -c ${srcPath}/char.c -o char.o -fPIC &&
    gcc -c ${srcPath}/io.c -o io.o -fPIC &&

    # Produce the executable
    gcc main.o char.o io.o ${filename}.o -o ${filename}
}

interp() {
    echo "Interpreting the AST for file $1..."
    cp ${srcPath}/std.lonn .
    racket -t ${srcPath}/interp-file.rkt -m $1
}

image() {
    echo "Producing image..."
}

if [ $# -lt 2 ]
then
    usage
    exit 1
fi

case $1 in
    "-c")
        compile $2
        rm ${filename}.o ${filename}.s main.o char.o io.o
        ;;
    "-i")
        interp  $2
        ;;
    "-v")
        image   $2
        ;;
    *) usage ;;
esac

# Since this is common to all of the options
# we can "factor it out"; at least while we use
# keep using our copying the file around hack
rm std.lonn
